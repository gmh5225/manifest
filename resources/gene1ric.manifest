<?xml version="1.0" encoding="UTF-8" standalone="yes"?> 
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"> 
 <description>Foxit Shell-Extension (x86)</description> 
  <dependency> 
    <dependentAssembly> 
      <assemblyIdentity name="Microsoft.Windows.Common-Controls" 
        version="6.0.0.0" publicKeyToken="6595b64144ccf1df" 
        type="win32" processorArchitecture="*" language="*"></assemblyIdentity> 
    </dependentAssembly> 
  </dependency> 
  <application xmlns="urn:schemas-microsoft-com:asm.v3"> 
     <windowsSettings>  <dpiAware      xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true/PM</dpiAware>                      </windowsSettings>     <!-- https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests#dpiaware --> 
     <windowsSettings>  <dpiAwareness  xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2,PerMonitor</dpiAwareness>  </windowsSettings>     <!-- improve 'dpiAware', can specify both. should help scale up legacy apps. https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests#dpiawareness --> 
     <windowsSettings>  <longPathAware xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">true</longPathAware>                    </windowsSettings>     <!-- windows 10 only, override MAX_PATH (260) character limit in various windows APIs to allow 32k characters, paths are getting weird, although it is handled by the windows API so legacy apps should be fine too.   also requires registry editing since this feature is disabled in the OS by default. not a good idea to turn this ON since you might take files in sd-card or portable HD elsewhere and won't be able to copy or read stuff.   https://docs.microsoft.com/en-gb/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd#enable-long-paths-in-windows-10-version-1607-and-later  --> 
     <windowsSettings>  <gdiScaling    xmlns="http://schemas.microsoft.com/SMI/2017/WindowsSettings">true</gdiScaling>                       </windowsSettings>     <!-- improve scale text and standard controls in apps, prevents blur. useful if you are using non 100% DPI for example in 'ease-of-access'. https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests#gdiscaling --> 
     <windowsSettings>  <heapType      xmlns="http://schemas.microsoft.com/SMI/2020/WindowsSettings">SegmentHeap</heapType>                  </windowsSettings>     <!-- change windows heap API to use a modern implementation, windows 10+ only.                         https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests#heaptype                                                                                                          --> 
  </application> 
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3"> 
    <security> 
      <requestedPrivileges> 
        <requestedExecutionLevel level="asInvoker" uiAccess="false" /> 
      </requestedPrivileges> 
    </security> 
  </trustInfo> 
  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1"> <!-- without it, apps will run in windows vista compatibility in windows 7.   https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests#compatibility --> 
    <application> 
      <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"></supportedOS> <!-- Windows 10/11  /  Windows Server 2016/2019  --> 
      <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"></supportedOS> <!-- Windows 8.1    /  Windows Server 2012 R2    --> 
      <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"></supportedOS> <!-- Windows 8      /  Windows Server 2012       --> 
      <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"></supportedOS> <!-- Windows 7      /  Windows Server 2008 R2    --> 
      <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"></supportedOS> <!-- Windows Vista  /  Windows Server 2008       --> 
    </application> 
  </compatibility> 
</assembly> 
 